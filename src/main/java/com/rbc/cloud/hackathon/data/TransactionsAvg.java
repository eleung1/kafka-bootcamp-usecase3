/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.rbc.cloud.hackathon.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionsAvg extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3023730597289094842L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionsAvg\",\"namespace\":\"com.rbc.cloud.hackathon.data\",\"fields\":[{\"name\":\"CustId\",\"type\":\"string\"},{\"name\":\"TransactionSum\",\"type\":\"int\"},{\"name\":\"TransactionCount\",\"type\":\"int\"},{\"name\":\"TransactionAvg\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionsAvg> ENCODER =
      new BinaryMessageEncoder<TransactionsAvg>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionsAvg> DECODER =
      new BinaryMessageDecoder<TransactionsAvg>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransactionsAvg> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransactionsAvg> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionsAvg>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransactionsAvg to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransactionsAvg from a ByteBuffer. */
  public static TransactionsAvg fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence CustId;
  @Deprecated public int TransactionSum;
  @Deprecated public int TransactionCount;
  @Deprecated public double TransactionAvg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionsAvg() {}

  /**
   * All-args constructor.
   * @param CustId The new value for CustId
   * @param TransactionSum The new value for TransactionSum
   * @param TransactionCount The new value for TransactionCount
   * @param TransactionAvg The new value for TransactionAvg
   */
  public TransactionsAvg(java.lang.CharSequence CustId, java.lang.Integer TransactionSum, java.lang.Integer TransactionCount, java.lang.Double TransactionAvg) {
    this.CustId = CustId;
    this.TransactionSum = TransactionSum;
    this.TransactionCount = TransactionCount;
    this.TransactionAvg = TransactionAvg;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CustId;
    case 1: return TransactionSum;
    case 2: return TransactionCount;
    case 3: return TransactionAvg;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CustId = (java.lang.CharSequence)value$; break;
    case 1: TransactionSum = (java.lang.Integer)value$; break;
    case 2: TransactionCount = (java.lang.Integer)value$; break;
    case 3: TransactionAvg = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CustId' field.
   * @return The value of the 'CustId' field.
   */
  public java.lang.CharSequence getCustId() {
    return CustId;
  }

  /**
   * Sets the value of the 'CustId' field.
   * @param value the value to set.
   */
  public void setCustId(java.lang.CharSequence value) {
    this.CustId = value;
  }

  /**
   * Gets the value of the 'TransactionSum' field.
   * @return The value of the 'TransactionSum' field.
   */
  public java.lang.Integer getTransactionSum() {
    return TransactionSum;
  }

  /**
   * Sets the value of the 'TransactionSum' field.
   * @param value the value to set.
   */
  public void setTransactionSum(java.lang.Integer value) {
    this.TransactionSum = value;
  }

  /**
   * Gets the value of the 'TransactionCount' field.
   * @return The value of the 'TransactionCount' field.
   */
  public java.lang.Integer getTransactionCount() {
    return TransactionCount;
  }

  /**
   * Sets the value of the 'TransactionCount' field.
   * @param value the value to set.
   */
  public void setTransactionCount(java.lang.Integer value) {
    this.TransactionCount = value;
  }

  /**
   * Gets the value of the 'TransactionAvg' field.
   * @return The value of the 'TransactionAvg' field.
   */
  public java.lang.Double getTransactionAvg() {
    return TransactionAvg;
  }

  /**
   * Sets the value of the 'TransactionAvg' field.
   * @param value the value to set.
   */
  public void setTransactionAvg(java.lang.Double value) {
    this.TransactionAvg = value;
  }

  /**
   * Creates a new TransactionsAvg RecordBuilder.
   * @return A new TransactionsAvg RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.TransactionsAvg.Builder newBuilder() {
    return new com.rbc.cloud.hackathon.data.TransactionsAvg.Builder();
  }

  /**
   * Creates a new TransactionsAvg RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionsAvg RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.TransactionsAvg.Builder newBuilder(com.rbc.cloud.hackathon.data.TransactionsAvg.Builder other) {
    return new com.rbc.cloud.hackathon.data.TransactionsAvg.Builder(other);
  }

  /**
   * Creates a new TransactionsAvg RecordBuilder by copying an existing TransactionsAvg instance.
   * @param other The existing instance to copy.
   * @return A new TransactionsAvg RecordBuilder
   */
  public static com.rbc.cloud.hackathon.data.TransactionsAvg.Builder newBuilder(com.rbc.cloud.hackathon.data.TransactionsAvg other) {
    return new com.rbc.cloud.hackathon.data.TransactionsAvg.Builder(other);
  }

  /**
   * RecordBuilder for TransactionsAvg instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionsAvg>
    implements org.apache.avro.data.RecordBuilder<TransactionsAvg> {

    private java.lang.CharSequence CustId;
    private int TransactionSum;
    private int TransactionCount;
    private double TransactionAvg;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.rbc.cloud.hackathon.data.TransactionsAvg.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CustId)) {
        this.CustId = data().deepCopy(fields()[0].schema(), other.CustId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TransactionSum)) {
        this.TransactionSum = data().deepCopy(fields()[1].schema(), other.TransactionSum);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TransactionCount)) {
        this.TransactionCount = data().deepCopy(fields()[2].schema(), other.TransactionCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TransactionAvg)) {
        this.TransactionAvg = data().deepCopy(fields()[3].schema(), other.TransactionAvg);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionsAvg instance
     * @param other The existing instance to copy.
     */
    private Builder(com.rbc.cloud.hackathon.data.TransactionsAvg other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CustId)) {
        this.CustId = data().deepCopy(fields()[0].schema(), other.CustId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TransactionSum)) {
        this.TransactionSum = data().deepCopy(fields()[1].schema(), other.TransactionSum);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TransactionCount)) {
        this.TransactionCount = data().deepCopy(fields()[2].schema(), other.TransactionCount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TransactionAvg)) {
        this.TransactionAvg = data().deepCopy(fields()[3].schema(), other.TransactionAvg);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'CustId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustId() {
      return CustId;
    }

    /**
      * Sets the value of the 'CustId' field.
      * @param value The value of 'CustId'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder setCustId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.CustId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CustId' field has been set.
      * @return True if the 'CustId' field has been set, false otherwise.
      */
    public boolean hasCustId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CustId' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder clearCustId() {
      CustId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'TransactionSum' field.
      * @return The value.
      */
    public java.lang.Integer getTransactionSum() {
      return TransactionSum;
    }

    /**
      * Sets the value of the 'TransactionSum' field.
      * @param value The value of 'TransactionSum'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder setTransactionSum(int value) {
      validate(fields()[1], value);
      this.TransactionSum = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'TransactionSum' field has been set.
      * @return True if the 'TransactionSum' field has been set, false otherwise.
      */
    public boolean hasTransactionSum() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'TransactionSum' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder clearTransactionSum() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TransactionCount' field.
      * @return The value.
      */
    public java.lang.Integer getTransactionCount() {
      return TransactionCount;
    }

    /**
      * Sets the value of the 'TransactionCount' field.
      * @param value The value of 'TransactionCount'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder setTransactionCount(int value) {
      validate(fields()[2], value);
      this.TransactionCount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TransactionCount' field has been set.
      * @return True if the 'TransactionCount' field has been set, false otherwise.
      */
    public boolean hasTransactionCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TransactionCount' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder clearTransactionCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TransactionAvg' field.
      * @return The value.
      */
    public java.lang.Double getTransactionAvg() {
      return TransactionAvg;
    }

    /**
      * Sets the value of the 'TransactionAvg' field.
      * @param value The value of 'TransactionAvg'.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder setTransactionAvg(double value) {
      validate(fields()[3], value);
      this.TransactionAvg = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TransactionAvg' field has been set.
      * @return True if the 'TransactionAvg' field has been set, false otherwise.
      */
    public boolean hasTransactionAvg() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TransactionAvg' field.
      * @return This builder.
      */
    public com.rbc.cloud.hackathon.data.TransactionsAvg.Builder clearTransactionAvg() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionsAvg build() {
      try {
        TransactionsAvg record = new TransactionsAvg();
        record.CustId = fieldSetFlags()[0] ? this.CustId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.TransactionSum = fieldSetFlags()[1] ? this.TransactionSum : (java.lang.Integer) defaultValue(fields()[1]);
        record.TransactionCount = fieldSetFlags()[2] ? this.TransactionCount : (java.lang.Integer) defaultValue(fields()[2]);
        record.TransactionAvg = fieldSetFlags()[3] ? this.TransactionAvg : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionsAvg>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionsAvg>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionsAvg>
    READER$ = (org.apache.avro.io.DatumReader<TransactionsAvg>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
